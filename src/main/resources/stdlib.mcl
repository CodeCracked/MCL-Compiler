namespace minecraft
{
    event load();
    event tick();
}

namespace mcl
{
    event reload();
    event install();
	event uninstall();

    listener minecraft:load()
    {
        native
        ''
            scoreboard objectives add mcl.lifecycle dummy
            data modify storage mcl:runtime TransientCallStack set value [{}]
            execute unless score Initialized mcl.lifecycle matches 1.. run function #mcl:install
            function #mcl:reload
        '';
    }
    listener mcl:install()
    {
        native
        ''
            # Setup Core Module
            scoreboard objectives add mcl.registers dummy
            data modify storage mcl:runtime PersistentCallStack set value [{}]

            # Setup Math Module
            function mcl:math/main/setup

            # Flag Setup Complete
            scoreboard players set Initialized mcl.lifecycle 1
        '';
    }
	listener mcl:uninstall()
	{
		native
		''
		    # Remove Math Module
			function mcl:math/main/uninstall
			function mcl:math/float/uninstall
            function mcl:math/extended_float/uninstall
            function mcl:math/bitwise/uninstall
			data remove storage mcl:math R0

            # Remove Core Module
			scoreboard objectives remove mcl.lifecycle
			scoreboard objectives remove mcl.registers
			data remove storage mcl:runtime TransientCallStack
			data remove storage mcl:runtime PersistentCallStack
			data remove storage mcl:runtime Return
		'';
	}

	native float sin(float degrees): "mcl:math/extended_float/32/sin/main"
    {
        degrees: bind_float("P0", "P1", "P2", "mcl.math.io"),
        return:  return_float("R0", "R1", "R2", "mcl.math.io")
    }
    native float cos(float degrees): "mcl:math/extended_float/32/cos/main"
    {
        degrees: bind_float("P0", "P1", "P2", "mcl.math.io"),
        return:  return_float("R0", "R1", "R2", "mcl.math.io")
    }
    native float tan(float degrees): "mcl:math/extended_float/32/tan/main"
    {
        degrees: bind_float("P0", "P1", "P2", "mcl.math.io"),
        return:  return_float("R0", "R1", "R2", "mcl.math.io")
    }
    native float pow(float base, float exponent): "mcl:math/extended_float/32/power/main"
    {
        base:     bind_float("P0", "P1", "P2", "mcl.math.io"),
        exponent: bind_float("P3", "P4", "P5", "mcl.math.io"),
        return:   return_float("R0", "R1", "R2", "mcl.math.io")
    }
}
